// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace cmv.tecnologia.Tests.NotificationService
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;
    using Microsoft.Rest;
    using Models;

    /// <summary>
    /// Extension methods for Notification.
    /// </summary>
    public static partial class NotificationExtensions
    {
            /// <summary>
            /// Envia mensaje de texto de CMV
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='authorization'>
            /// </param>
            public static object SendSmsNotificationTextMessage(this INotification operations, SmsNotification request, string authorization = default(string))
            {
                return Task.Factory.StartNew(s => ((INotification)s).SendSmsNotificationTextMessageAsync(request, authorization), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Envia mensaje de texto de CMV
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='authorization'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> SendSmsNotificationTextMessageAsync(this INotification operations, SmsNotification request, string authorization = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SendSmsNotificationTextMessageWithHttpMessagesAsync(request, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Envia mensaje de correo desde Cmv Finanzas
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='authorization'>
            /// </param>
            public static object SendEMailNotificationMessageCmv(this INotification operations, EmailNotification request, string authorization = default(string))
            {
                return Task.Factory.StartNew(s => ((INotification)s).SendEMailNotificationMessageCmvAsync(request, authorization), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Envia mensaje de correo desde Cmv Finanzas
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='authorization'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> SendEMailNotificationMessageCmvAsync(this INotification operations, EmailNotification request, string authorization = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SendEMailNotificationMessageCmvWithHttpMessagesAsync(request, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Envia mensaje de correo desde Robot Cmv
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='authorization'>
            /// </param>
            public static object SendLocalEMailNotificationMessage(this INotification operations, EmailNotification request, string authorization = default(string))
            {
                return Task.Factory.StartNew(s => ((INotification)s).SendLocalEMailNotificationMessageAsync(request, authorization), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Envia mensaje de correo desde Robot Cmv
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='authorization'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> SendLocalEMailNotificationMessageAsync(this INotification operations, EmailNotification request, string authorization = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SendLocalEMailNotificationMessageWithHttpMessagesAsync(request, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Envia mensaje de correo
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='authorization'>
            /// </param>
            public static object SendEMailNotificationMessage(this INotification operations, EmailNotification request, string authorization = default(string))
            {
                return Task.Factory.StartNew(s => ((INotification)s).SendEMailNotificationMessageAsync(request, authorization), operations, CancellationToken.None, TaskCreationOptions.None, TaskScheduler.Default).Unwrap().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Envia mensaje de correo
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='request'>
            /// </param>
            /// <param name='authorization'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> SendEMailNotificationMessageAsync(this INotification operations, EmailNotification request, string authorization = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SendEMailNotificationMessageWithHttpMessagesAsync(request, authorization, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
